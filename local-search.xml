<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ubuntu安装启动minikube</title>
    <link href="/2023/04/27/Ubuntu%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8minikube/"/>
    <url>/2023/04/27/Ubuntu%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8minikube/</url>
    
    <content type="html"><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><ol><li>执行命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install -y docker.io #安装Docker Engine<br><br>sudo service docker start #启动docker服务<br><br>sudo usermod -aG docker $&#123;USER&#125; #当前用户加入docker组<br></code></pre></td></tr></table></figure><p>退出系统（命令 exit ），再重新登录一次，这让修改用户组的命令 usermod 生效。</p><ol start="2"><li>设置下载源，使用阿里云镜像</li></ol><p>登录阿里云，搜索容器镜像服务，点击镜像工具-镜像加速器，按操作文档配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">适用ubuntu和centos</span><br>sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://un5u3q54.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="下载启动minikube"><a href="#下载启动minikube" class="headerlink" title="下载启动minikube"></a>下载启动minikube</h3><ol><li>下载minikube</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.25.2/minikube-linux-arm64<br></code></pre></td></tr></table></figure><ol start="2"><li>安装minikube</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo install minikube /usr/local/bin/<br></code></pre></td></tr></table></figure><ol start="3"><li>启动minikube</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">minikube start --kubernetes-version=v1.23.3 --image-mirror-country=cn<br></code></pre></td></tr></table></figure><ol start="4"><li>查看minikube确认是否安装成功</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">minikube version<br><br>minikube status<br><br>minikube node list<br></code></pre></td></tr></table></figure><h3 id="安装kubctl"><a href="#安装kubctl" class="headerlink" title="安装kubctl"></a>安装kubctl</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">minikube kubectl<br><br>alias kubectl=&quot;minikube kubectl --&quot; #简化kubectl命令<br><br>kubectl run nginx --image=nginx:alpine #在k8s里运行一个nginx<br><br>kubectl get pod #查看pod列表<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用lanproxy搭建内网穿透</title>
    <link href="/2023/04/25/%E4%BD%BF%E7%94%A8lanproxy%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <url>/2023/04/25/%E4%BD%BF%E7%94%A8lanproxy%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>安装了nginx和docker的公网服务器</li><li>已备案的域名</li><li>本地电脑安装java、maven、git</li><li>一个可启动的项目配合测试</li></ul><h3 id="使用docker下载运行lanproxy服务端"><a href="#使用docker下载运行lanproxy服务端" class="headerlink" title="使用docker下载运行lanproxy服务端"></a>使用docker下载运行lanproxy服务端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>           --name lanproxy-server \<br>           -p 8090:8090 \<br>           -p 4900:4900 \<br>           -p 4993:4993 \<br>           -p 9000-9100:9000-9100 \<br>           biodwhu/lanproxy<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">8090 后台管理系统端口</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4900 客户端连接服务端http端口</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4903 客户端连接服务端ssl端口</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">9000-9100 准备提供内网穿透的端口</span><br></code></pre></td></tr></table></figure><p>使用docker ps查看状态</p><p><img src="https://res-imgs.oss-cn-hangzhou.aliyuncs.com/picgo/202304251318180.png" alt="image-20230425110930227"></p><p>为避免太多端口暴露出去，使用nginx配置反向代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>    listen 80;<br>    # 配置的域名<br>    server_name lanproxy.abc.com;<br>    charset utf-8;<br>    location / &#123;<br>        proxy_set_header   X-Real-IP $remote_addr;<br>        proxy_set_header   Host      $http_host;<br>        # 这里根据你的 lanproxy 配置，改成 config.server.port的值<br>        proxy_pass       http://localhost:8090;<br>        client_max_body_size 35m;<br>        proxy_http_version 1.1;<br>        proxy_set_header Upgrade $http_upgrade;<br>        proxy_set_header Connection &quot;upgrade&quot;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器访问<a href="http://lanproxy.abc.com/">http://lanproxy.abc.com</a></p><p><img src="https://res-imgs.oss-cn-hangzhou.aliyuncs.com/picgo/202304251318646.png" alt="image-20230425111309538"></p><p>出现该页面为服务端运行成功，默认密码为admin&#x2F;admin</p><p>进入管理后台，添加客户端，保存密钥</p><p><img src="https://res-imgs.oss-cn-hangzhou.aliyuncs.com/picgo/202304251318252.png" alt="image-20230425111616137"></p><h3 id="下载启动客户端"><a href="#下载启动客户端" class="headerlink" title="下载启动客户端"></a>下载启动客户端</h3><p>使用git clone lanproxy代码到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/ffay/lanproxy.git lanproxy<br></code></pre></td></tr></table></figure><p>进入lanproxy目录进行打包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd lanproxy<br><br>mvn package<br></code></pre></td></tr></table></figure><p>打包完成之后，进入 <code>distribution/proxy-client-0.1</code> 目录，有四个文件夹：<code>bin</code>、<code>conf</code>、<code>lib</code>和<code>log</code>，配置信息在 <code>conf/config.properties</code> 文件内，根据前面服务端的配置信息修改填充</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 添加客户端获得的密钥</span><br><span class="hljs-attr">client.key</span>=<span class="hljs-string">##########</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># ssl配置</span><br><span class="hljs-attr">ssl.enable</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">ssl.jksPath</span>=<span class="hljs-string">test.jks</span><br><span class="hljs-attr">ssl.keyStorePassword</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 服务器公网ip</span><br><span class="hljs-attr">server.host</span>=<span class="hljs-string">11.111.111.111</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#default ssl port is 4993</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">4900</span><br></code></pre></td></tr></table></figure><p>启动客户端</p><ul><li><p>windows直接运行 bin目录下startup.bat文件</p></li><li><p>Mac&#x2F;linux打开终端，输入 bash startup.sh 命令</p></li></ul><p>停止客户端</p><ul><li>bash  stop.sh</li></ul><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><p>本地运行Java项目，端口号为9527，访问swagger正常</p><p>管理后台添加配置，映射到公网服务器9000端口</p><p><img src="https://res-imgs.oss-cn-hangzhou.aliyuncs.com/picgo/202304251319964.png" alt="image-20230425113519068"></p><p>服务器nginx配置文件添加配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>    listen 80;<br>    # 自定义域名<br>    server_name test.abc.com;<br>    charset utf-8;<br>    location / &#123;<br>        proxy_set_header   X-Real-IP $remote_addr;<br>        proxy_set_header   Host      $http_host;<br>        # 在lanproxy管理后台上配置的公网端口<br>        proxy_pass       http://localhost:9000;<br>        client_max_body_size 35m;<br>        proxy_http_version 1.1;<br>        proxy_set_header Upgrade $http_upgrade;<br>        proxy_set_header Connection &quot;upgrade&quot;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>reload下nginx，浏览器直接访问域名，访问swagger正常，穿透成功</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java接入微信支付</title>
    <link href="/2022/06/24/Java%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    <url>/2022/06/24/Java%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/</url>
    
    <content type="html"><![CDATA[<h3 id="在resources下新增wx-cert目录，存放微信支付的证书和证书密钥"><a href="#在resources下新增wx-cert目录，存放微信支付的证书和证书密钥" class="headerlink" title="在resources下新增wx.cert目录，存放微信支付的证书和证书密钥"></a>在resources下新增wx.cert目录，存放微信支付的证书和证书密钥</h3><h3 id="导入Maven依赖"><a href="#导入Maven依赖" class="headerlink" title="导入Maven依赖"></a>导入Maven依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">&lt;!--微信支付SDK--&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;com.github.wechatpay-apiv3&lt;/groupId&gt;<br>  &lt;artifactId&gt;wechatpay-apache-httpclient&lt;/artifactId&gt;<br>  &lt;version&gt;0.3.0&lt;/version&gt;<br> &lt;/dependency&gt;<br><br></code></pre></td></tr></table></figure><h3 id="在application-yml配置文件添加配置"><a href="#在application-yml配置文件添加配置" class="headerlink" title="在application.yml配置文件添加配置"></a>在application.yml配置文件添加配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">domain:</span> <span class="hljs-string">http://projectyuming.com</span><br><span class="hljs-attr">wx:</span><br><span class="hljs-attr">appId:</span> <span class="hljs-string">******</span><br><span class="hljs-attr">wxpay:</span><br>  <span class="hljs-attr">mchId:</span> <span class="hljs-number">1635252342</span><br>  <span class="hljs-attr">mchSerialNo:</span> <span class="hljs-string">2F4C884FACDB474C68F2EFA714780E4FBEDB5643</span><br>  <span class="hljs-attr">privateKeyPath:</span> <span class="hljs-string">src/main/resources/wx/cert/apiclient_key.pem</span><br>  <span class="hljs-attr">apiV3Key:</span> <span class="hljs-string">6302946c78ce72255cb938b63ad3acx2</span><br>  <span class="hljs-attr">domain:</span> <span class="hljs-string">https://api.mch.weixin.qq.com</span><br>  <span class="hljs-attr">notifyUrl:</span> <span class="hljs-string">/callback/wxpay/notify</span><br></code></pre></td></tr></table></figure><h3 id="添加properties文件"><a href="#添加properties文件" class="headerlink" title="添加properties文件"></a>添加properties文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.common.properties;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;wxpay&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WxPayProperties</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String mchId;<br>    <span class="hljs-keyword">private</span> String mchSerialNo;<br>    <span class="hljs-keyword">private</span> String privateKeyPath;<br>    <span class="hljs-keyword">private</span> String apiV3Key;<br>    <span class="hljs-keyword">private</span> String domain;<br>    <span class="hljs-keyword">private</span> String notifyUrl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置config"><a href="#配置config" class="headerlink" title="配置config"></a>配置config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.common.config;<br><br><span class="hljs-keyword">import</span> com.test.common.properties.WxPayProperties;<br><span class="hljs-keyword">import</span> com.wechat.pay.contrib.apache.httpclient.WechatPayHttpClientBuilder;<br><span class="hljs-keyword">import</span> com.wechat.pay.contrib.apache.httpclient.auth.PrivateKeySigner;<br><span class="hljs-keyword">import</span> com.wechat.pay.contrib.apache.httpclient.auth.ScheduledUpdateCertificatesVerifier;<br><span class="hljs-keyword">import</span> com.wechat.pay.contrib.apache.httpclient.auth.WechatPay2Credentials;<br><span class="hljs-keyword">import</span> com.wechat.pay.contrib.apache.httpclient.auth.WechatPay2Validator;<br><span class="hljs-keyword">import</span> com.wechat.pay.contrib.apache.httpclient.util.PemUtil;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.security.PrivateKey;<br><br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(WxPayProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WxPayConfig</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WxPayProperties wxPayProperties;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取商户的私钥文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filename</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> PrivateKey <span class="hljs-title function_">getPrivateKey</span><span class="hljs-params">(String filename)</span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> PemUtil.loadPrivateKey(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;私钥文件不存在&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取签名验证器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ScheduledUpdateCertificatesVerifier <span class="hljs-title function_">getVerifier</span><span class="hljs-params">()</span>&#123;<br><br>        log.info(<span class="hljs-string">&quot;获取签名验证器&quot;</span>);<br><br>        <span class="hljs-comment">//获取商户私钥</span><br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> getPrivateKey(wxPayProperties.getPrivateKeyPath());<br><br>        <span class="hljs-comment">//私钥签名对象</span><br>        <span class="hljs-type">PrivateKeySigner</span> <span class="hljs-variable">privateKeySigner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivateKeySigner</span>(wxPayProperties.getMchSerialNo(), privateKey);<br><br>        <span class="hljs-comment">//身份认证对象</span><br>        <span class="hljs-type">WechatPay2Credentials</span> <span class="hljs-variable">wechatPay2Credentials</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WechatPay2Credentials</span>(wxPayProperties.getMchId(), privateKeySigner);<br><br>        <span class="hljs-comment">// 使用定时更新的签名验证器，不需要传入证书</span><br>        <span class="hljs-type">ScheduledUpdateCertificatesVerifier</span> <span class="hljs-variable">verifier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledUpdateCertificatesVerifier</span>(<br>                wechatPay2Credentials,<br>                wxPayProperties.getApiV3Key().getBytes(StandardCharsets.UTF_8));<br><br>        <span class="hljs-keyword">return</span> verifier;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取http请求对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> verifier</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(name = &quot;wxPayClient&quot;)</span><br>    <span class="hljs-keyword">public</span> CloseableHttpClient <span class="hljs-title function_">getWxPayClient</span><span class="hljs-params">(ScheduledUpdateCertificatesVerifier verifier)</span>&#123;<br><br>        log.info(<span class="hljs-string">&quot;获取httpClient&quot;</span>);<br><br>        <span class="hljs-comment">//获取商户私钥</span><br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> getPrivateKey(wxPayProperties.getPrivateKeyPath());<br><br>        <span class="hljs-type">WechatPayHttpClientBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> WechatPayHttpClientBuilder.create()<br>                .withMerchant(wxPayProperties.getMchId(), wxPayProperties.getMchSerialNo(), privateKey)<br>                .withValidator(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WechatPay2Validator</span>(verifier));<br>        <span class="hljs-comment">// ... 接下来，你仍然可以通过builder设置各种参数，来配置你的HttpClient</span><br><br>        <span class="hljs-comment">// 通过WechatPayHttpClientBuilder构造的HttpClient，会自动的处理签名和验签，并进行证书自动更新</span><br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> builder.build();<br><br>        <span class="hljs-keyword">return</span> httpClient;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取HttpClient，无需进行应答签名验证，跳过验签的流程</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(name = &quot;wxPayNoSignClient&quot;)</span><br>    <span class="hljs-keyword">public</span> CloseableHttpClient <span class="hljs-title function_">getWxPayNoSignClient</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-comment">//获取商户私钥</span><br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> getPrivateKey(wxPayProperties.getPrivateKeyPath());<br><br>        <span class="hljs-comment">//用于构造HttpClient</span><br>        <span class="hljs-type">WechatPayHttpClientBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> WechatPayHttpClientBuilder.create()<br>                <span class="hljs-comment">//设置商户信息</span><br>                .withMerchant(wxPayProperties.getMchId(), wxPayProperties.getMchSerialNo(), privateKey)<br>                <span class="hljs-comment">//无需进行签名验证、通过withValidator((response) -&gt; true)实现</span><br>                .withValidator((response) -&gt; <span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// 通过WechatPayHttpClientBuilder构造的HttpClient，会自动的处理签名和验签，并进行证书自动更新</span><br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> builder.build();<br><br>        log.info(<span class="hljs-string">&quot;== getWxPayNoSignClient END ==&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> httpClient;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="util工具类"><a href="#util工具类" class="headerlink" title="util工具类"></a>util工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.common.utils;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.util.RandomUtil;<br><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><span class="hljs-keyword">import</span> com.test.common.config.WxPayConfig;<br><span class="hljs-keyword">import</span> com.test.common.properties.WxPayProperties;<br><span class="hljs-keyword">import</span> com.test.web.entity.response.FileUploadResponse;<br><span class="hljs-keyword">import</span> com.wechat.pay.contrib.apache.httpclient.util.AesUtil;<br><span class="hljs-keyword">import</span> com.wechat.pay.contrib.apache.httpclient.util.PemUtil;<br><span class="hljs-keyword">import</span> lombok.SneakyThrows;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.HttpGet;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.HttpPost;<br><span class="hljs-keyword">import</span> org.apache.http.entity.StringEntity;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;<br><span class="hljs-keyword">import</span> org.apache.http.util.EntityUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 微信支付工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WxPayUtil</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;domain&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String domain;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;wx.appId&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String appId;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> WxPayProperties wxPayProperties;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> CloseableHttpClient wxPayClient;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * native下单</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">nativePay</span><span class="hljs-params">(BigDecimal payAmount, String title, String orderNo)</span> &#123;<br><br>        log.info(<span class="hljs-string">&quot;调用native下单API&quot;</span>);<br>        <span class="hljs-comment">//调用统一下单API</span><br>        <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpPost</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(wxPayProperties.getDomain().concat(<span class="hljs-string">&quot;/v3/pay/transactions/native&quot;</span>));<br><br>        <span class="hljs-comment">// 请求body参数</span><br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        Map&lt;String, Object&gt; paramsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        paramsMap.put(<span class="hljs-string">&quot;appid&quot;</span>, appId);<br>        paramsMap.put(<span class="hljs-string">&quot;mchid&quot;</span>, wxPayProperties.getMchId());<br>        paramsMap.put(<span class="hljs-string">&quot;description&quot;</span>, title);<br>        paramsMap.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>, orderNo);<br>        paramsMap.put(<span class="hljs-string">&quot;notify_url&quot;</span>, domain.concat(wxPayProperties.getNotifyUrl()));<br><br>        Map&lt;String, Object&gt; amountMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        amountMap.put(<span class="hljs-string">&quot;total&quot;</span>, payAmount.multiply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">100</span>)).intValue());<br>        amountMap.put(<span class="hljs-string">&quot;currency&quot;</span>, <span class="hljs-string">&quot;CNY&quot;</span>);<br>        paramsMap.put(<span class="hljs-string">&quot;amount&quot;</span>, amountMap);<br><br>        <span class="hljs-comment">//将参数转换成json字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonParams</span> <span class="hljs-operator">=</span> gson.toJson(paramsMap);<br>        log.info(<span class="hljs-string">&quot;请求参数 ===&gt; &#123;&#125;&quot;</span> + jsonParams);<br><br>        <span class="hljs-type">StringEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEntity</span>(jsonParams,<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        entity.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>        httpPost.setEntity(entity);<br>        httpPost.setHeader(<span class="hljs-string">&quot;Accept&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br><br>        <span class="hljs-comment">//完成签名并执行请求</span><br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> wxPayClient.execute(httpPost);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">bodyAsString</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity());<span class="hljs-comment">//响应体</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> response.getStatusLine().getStatusCode();<span class="hljs-comment">//响应状态码</span><br>        <span class="hljs-keyword">if</span> (statusCode == <span class="hljs-number">200</span>) &#123; <span class="hljs-comment">//处理成功</span><br>            log.info(<span class="hljs-string">&quot;成功, 返回结果 = &quot;</span> + bodyAsString);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (statusCode == <span class="hljs-number">204</span>) &#123; <span class="hljs-comment">//处理成功，无返回Body</span><br>            log.info(<span class="hljs-string">&quot;成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;下单失败,响应码 = &quot;</span> + statusCode+ <span class="hljs-string">&quot;,返回结果 = &quot;</span> + bodyAsString);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;request failed&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//响应结果</span><br>        Map&lt;String, String&gt; resultMap = gson.fromJson(bodyAsString, HashMap.class);<br>        <span class="hljs-keyword">return</span> resultMap.get(<span class="hljs-string">&quot;code_url&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据订单号查单</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderNo</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryOrder</span><span class="hljs-params">(String orderNo)</span> &#123;<br><br>        log.info(<span class="hljs-string">&quot;查单接口调用 ===&gt; &#123;&#125;&quot;</span>, orderNo);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;/v3/pay/transactions/out-trade-no/%s&quot;</span>, orderNo);<br>        url = wxPayProperties.getDomain().concat(url).concat(<span class="hljs-string">&quot;?mchid=&quot;</span>).concat(wxPayProperties.getMchId());<br><br>        <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(url);<br>        httpGet.setHeader(<span class="hljs-string">&quot;Accept&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br><br>        <span class="hljs-comment">//完成签名并执行请求</span><br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> wxPayClient.execute(httpGet);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">bodyAsString</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity());<span class="hljs-comment">//响应体</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> response.getStatusLine().getStatusCode();<span class="hljs-comment">//响应状态码</span><br>            <span class="hljs-keyword">if</span> (statusCode == <span class="hljs-number">200</span>) &#123; <span class="hljs-comment">//处理成功</span><br>                log.info(<span class="hljs-string">&quot;成功, 返回结果 = &quot;</span> + bodyAsString);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (statusCode == <span class="hljs-number">204</span>) &#123; <span class="hljs-comment">//处理成功，无返回Body</span><br>                log.info(<span class="hljs-string">&quot;成功&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                log.info(<span class="hljs-string">&quot;查单接口调用,响应码 = &quot;</span> + statusCode+ <span class="hljs-string">&quot;,返回结果 = &quot;</span> + bodyAsString);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;request failed&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> bodyAsString;<br><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            response.close();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关单接口的调用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderNo</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">closeOrder</span><span class="hljs-params">(String orderNo)</span> &#123;<br><br>        log.info(<span class="hljs-string">&quot;关单接口的调用，订单号 ===&gt; &#123;&#125;&quot;</span>, orderNo);<br><br>        <span class="hljs-comment">//创建远程请求对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;/v3/pay/transactions/out-trade-no/%s/close&quot;</span>, orderNo);<br>        url = wxPayProperties.getDomain().concat(url);<br>        <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpPost</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(url);<br><br>        <span class="hljs-comment">//组装json请求体</span><br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        Map&lt;String, String&gt; paramsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        paramsMap.put(<span class="hljs-string">&quot;mchid&quot;</span>, wxPayProperties.getMchId());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonParams</span> <span class="hljs-operator">=</span> gson.toJson(paramsMap);<br>        log.info(<span class="hljs-string">&quot;请求参数 ===&gt; &#123;&#125;&quot;</span>, jsonParams);<br><br>        <span class="hljs-comment">//将请求参数设置到请求对象中</span><br>        <span class="hljs-type">StringEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEntity</span>(jsonParams,<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        entity.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>        httpPost.setEntity(entity);<br>        httpPost.setHeader(<span class="hljs-string">&quot;Accept&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br><br>        <span class="hljs-comment">//完成签名并执行请求</span><br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> wxPayClient.execute(httpPost);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> response.getStatusLine().getStatusCode();<span class="hljs-comment">//响应状态码</span><br>            <span class="hljs-keyword">if</span> (statusCode == <span class="hljs-number">200</span>) &#123; <span class="hljs-comment">//处理成功</span><br>                log.info(<span class="hljs-string">&quot;成功200&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (statusCode == <span class="hljs-number">204</span>) &#123; <span class="hljs-comment">//处理成功，无返回Body</span><br>                log.info(<span class="hljs-string">&quot;成功204&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                log.info(<span class="hljs-string">&quot;关单失败,响应码 = &quot;</span> + statusCode);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;request failed&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            response.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 退款</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderNo</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> reason</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> refundAmount</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderAmount</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> notifyUrl</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refund</span><span class="hljs-params">(String orderNo, String reason, BigDecimal refundAmount, BigDecimal orderAmount, String notifyUrl)</span> &#123;<br><br>        log.info(<span class="hljs-string">&quot;调用退款API&quot;</span>);<br><br>        <span class="hljs-comment">//调用统一下单API</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> wxPayProperties.getDomain().concat(<span class="hljs-string">&quot;/v3/refund/domestic/refunds&quot;</span>);<br>        <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpPost</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(url);<br><br>        <span class="hljs-comment">// 请求body参数</span><br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">paramsMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        paramsMap.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>, orderNo);<span class="hljs-comment">//订单编号</span><br>        paramsMap.put(<span class="hljs-string">&quot;out_refund_no&quot;</span>, orderNo);<span class="hljs-comment">//退款单编号</span><br>        paramsMap.put(<span class="hljs-string">&quot;reason&quot;</span>,reason);<span class="hljs-comment">//退款原因</span><br>        paramsMap.put(<span class="hljs-string">&quot;notify_url&quot;</span>, domain.concat(notifyUrl));<span class="hljs-comment">//退款通知地址</span><br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">amountMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        amountMap.put(<span class="hljs-string">&quot;refund&quot;</span>, refundAmount.multiply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">100</span>)).intValue());<span class="hljs-comment">//退款金额</span><br>        amountMap.put(<span class="hljs-string">&quot;total&quot;</span>, orderAmount.multiply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">100</span>)).intValue());<span class="hljs-comment">//原订单金额</span><br>        amountMap.put(<span class="hljs-string">&quot;currency&quot;</span>, <span class="hljs-string">&quot;CNY&quot;</span>);<span class="hljs-comment">//退款币种</span><br>        paramsMap.put(<span class="hljs-string">&quot;amount&quot;</span>, amountMap);<br><br>        <span class="hljs-comment">//将参数转换成json字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonParams</span> <span class="hljs-operator">=</span> gson.toJson(paramsMap);<br>        log.info(<span class="hljs-string">&quot;请求参数 ===&gt; &#123;&#125;&quot;</span> + jsonParams);<br><br>        <span class="hljs-type">StringEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEntity</span>(jsonParams,<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        entity.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<span class="hljs-comment">//设置请求报文格式</span><br>        httpPost.setEntity(entity);<span class="hljs-comment">//将请求报文放入请求对象</span><br>        httpPost.setHeader(<span class="hljs-string">&quot;Accept&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<span class="hljs-comment">//设置响应报文格式</span><br><br>        <span class="hljs-comment">//完成签名并执行请求，并完成验签</span><br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> wxPayClient.execute(httpPost);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//解析响应结果</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">bodyAsString</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity());<br>            <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> response.getStatusLine().getStatusCode();<br>            <span class="hljs-keyword">if</span> (statusCode == <span class="hljs-number">200</span>) &#123;<br>                log.info(<span class="hljs-string">&quot;成功, 退款返回结果 = &quot;</span> + bodyAsString);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (statusCode == <span class="hljs-number">204</span>) &#123;<br>                log.info(<span class="hljs-string">&quot;成功&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;退款异常, 响应码 = &quot;</span> + statusCode+ <span class="hljs-string">&quot;, 退款返回结果 = &quot;</span> + bodyAsString);<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            response.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getPaymentParameters</span><span class="hljs-params">(String prepayId)</span> &#123;<br>        <span class="hljs-comment">//随机字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">nonceStr</span> <span class="hljs-operator">=</span> RandomUtil.randomString(<span class="hljs-number">32</span>);<span class="hljs-comment">//真！随机字符串</span><br>        <span class="hljs-comment">//时间戳</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> System.currentTimeMillis() / <span class="hljs-number">1000</span>;<br>        <span class="hljs-comment">//从下往上依次生成</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> buildMessage(appId, timestamp, nonceStr, <span class="hljs-string">&quot;prepay_id=&quot;</span>+prepayId);<br>        <span class="hljs-comment">//签名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> sign(message.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>));<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;timeStamp&quot;</span>, String.valueOf(timestamp));<br>        map.put(<span class="hljs-string">&quot;nonceStr&quot;</span>, nonceStr);<br>        map.put(<span class="hljs-string">&quot;package&quot;</span>, <span class="hljs-string">&quot;prepay_id=&quot;</span>+prepayId);<br>        map.put(<span class="hljs-string">&quot;signType&quot;</span>, <span class="hljs-string">&quot;RSA&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;paySign&quot;</span>, signature);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">sign</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] message)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException, SignatureException, IOException, InvalidKeyException &#123;<br>        <span class="hljs-comment">//签名方式</span><br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">sign</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;SHA256withRSA&quot;</span>);<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> PemUtil.loadPrivateKey(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(wxPayProperties.getPrivateKeyPath()));<br>        sign.initSign(privateKey);<br>        sign.update(message);<br>        <span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(sign.sign());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  按照前端签名文档规范进行排序，\n是换行</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> appid</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timestamp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> nonceStr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> prepay_id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">buildMessage</span><span class="hljs-params">(String appid, <span class="hljs-type">long</span> timestamp, String nonceStr, String prepay_id)</span> &#123;<br><br>        <span class="hljs-keyword">return</span> appid + <span class="hljs-string">&quot;\n&quot;</span><br>                + timestamp + <span class="hljs-string">&quot;\n&quot;</span><br>                + nonceStr + <span class="hljs-string">&quot;\n&quot;</span><br>                + prepay_id + <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对称解密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bodyMap</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">decryptFromResource</span><span class="hljs-params">(Map&lt;String, Object&gt; bodyMap)</span> <span class="hljs-keyword">throws</span> GeneralSecurityException &#123;<br><br>        log.info(<span class="hljs-string">&quot;密文解密&quot;</span>);<br><br>        <span class="hljs-comment">//通知数据</span><br>        Map&lt;String, String&gt; resourceMap = (Map) bodyMap.get(<span class="hljs-string">&quot;resource&quot;</span>);<br>        <span class="hljs-comment">//数据密文</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ciphertext</span> <span class="hljs-operator">=</span> resourceMap.get(<span class="hljs-string">&quot;ciphertext&quot;</span>);<br>        <span class="hljs-comment">//随机串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">nonce</span> <span class="hljs-operator">=</span> resourceMap.get(<span class="hljs-string">&quot;nonce&quot;</span>);<br>        <span class="hljs-comment">//附加数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">associatedData</span> <span class="hljs-operator">=</span> resourceMap.get(<span class="hljs-string">&quot;associated_data&quot;</span>);<br><br>        log.info(<span class="hljs-string">&quot;密文 ===&gt; &#123;&#125;&quot;</span>, ciphertext);<br>        <span class="hljs-type">AesUtil</span> <span class="hljs-variable">aesUtil</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AesUtil</span>(wxPayProperties.getApiV3Key().getBytes(StandardCharsets.UTF_8));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">plainText</span> <span class="hljs-operator">=</span> aesUtil.decryptToString(associatedData.getBytes(StandardCharsets.UTF_8),<br>                nonce.getBytes(StandardCharsets.UTF_8),<br>                ciphertext);<br><br>        log.info(<span class="hljs-string">&quot;明文 ===&gt; &#123;&#125;&quot;</span>, plainText);<br><br>        <span class="hljs-keyword">return</span> plainText;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="添加接收微信消息通知方法"><a href="#添加接收微信消息通知方法" class="headerlink" title="添加接收微信消息通知方法"></a>添加接收微信消息通知方法</h3><h4 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.web.controller;<br><br><span class="hljs-keyword">import</span> com.test.web.service.ICallbackService;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Api(tags = &quot;回调相关接口&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/callback&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CallbackController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ICallbackService callbackService;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;微信支付通知&quot;, notes = &quot;微信支付通知&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/wxpay/notify&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wxpayNotify</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;wxpay支付通知正在执行&quot;</span>);<br>        callbackService.wxPayNotify(request, response);<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="service接口层"><a href="#service接口层" class="headerlink" title="service接口层"></a>service接口层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.web.service;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICallbackService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 微信支付消息通知</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">wxPayNotify</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span>;<br>  <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="service实现层"><a href="#service实现层" class="headerlink" title="service实现层"></a>service实现层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.web.service.impl;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.util.ObjectUtil;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.test.common.utils.WxPayUtil;<br><span class="hljs-keyword">import</span> com.wechat.pay.contrib.apache.httpclient.auth.Verifier;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CallbackServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICallbackService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> Verifier verifier;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> WxPayUtil wxPayUtil;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wxPayNotify</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//处理通知参数</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> HttpUtils.readData(request);<br>            Map&lt;String, Object&gt; bodyMap = JSONObject.parseObject(body, HashMap.class);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">requestId</span> <span class="hljs-operator">=</span> (String)bodyMap.get(<span class="hljs-string">&quot;id&quot;</span>);<br>            log.info(<span class="hljs-string">&quot;支付通知的id ===&gt; &#123;&#125;&quot;</span>, requestId);<br>            log.info(<span class="hljs-string">&quot;支付通知的完整数据 ===&gt; &#123;&#125;&quot;</span>, body);<br><br>            <span class="hljs-comment">//签名的验证</span><br>            <span class="hljs-type">WechatPay2ValidatorForRequest</span> <span class="hljs-variable">wechatPay2ValidatorForRequest</span><br>                    <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WechatPay2ValidatorForRequest</span>(verifier, requestId, body);<br>            <span class="hljs-keyword">if</span>(!wechatPay2ValidatorForRequest.validate(request))&#123;<br>                log.error(<span class="hljs-string">&quot;通知验签失败&quot;</span>);<br>                <span class="hljs-comment">//失败应答</span><br>                response.setStatus(<span class="hljs-number">500</span>);<br><span class="hljs-keyword">return</span>；<br>            &#125;<br>            log.info(<span class="hljs-string">&quot;通知验签成功&quot;</span>);<br><br>            <span class="hljs-comment">//解密报文</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">plainText</span> <span class="hljs-operator">=</span> wxPayUtil.decryptFromResource(bodyMap);<br><br>            <span class="hljs-comment">//将明文转换成map</span><br>            <span class="hljs-type">HashMap</span> <span class="hljs-variable">plainTextMap</span> <span class="hljs-operator">=</span> JSONObject.parseObject(plainText, HashMap.class);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">outTradeNo</span> <span class="hljs-operator">=</span> (String)plainTextMap.get(<span class="hljs-string">&quot;out_trade_no&quot;</span>);<br>          <br>          <span class="hljs-comment">//TODO 业务逻辑处理</span><br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            response.setStatus(<span class="hljs-number">500</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CV</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java实现邮件发送功能</title>
    <link href="/2021/04/24/Java%E5%AE%9E%E7%8E%B0%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%8A%9F%E8%83%BD/"/>
    <url>/2021/04/24/Java%E5%AE%9E%E7%8E%B0%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<ol><li>导入Maven依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">&lt;dependency&gt;<br>  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br>&lt;artifactId&gt;commons-email&lt;/artifactId&gt;<br>  &lt;version&gt;1.5&lt;/version&gt;<br>&lt;/dependency&gt;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>Java添加工具类EmailUtil</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs shell">package com.test.common.util;<br><br>import cn.hutool.core.util.ObjectUtil;<br>import lombok.extern.slf4j.Slf4j;<br>import org.apache.commons.mail.EmailException;<br>import org.apache.commons.mail.HtmlEmail;<br><br>import java.util.Set;<br><br>/**<br> * 邮箱工具类<br> * @version 1.0<br> */<br>@Slf4j<br>public class EmailUtil &#123;<br><br>    //smtp邮箱服务器<br>    private static String SMTP_SERVER = &quot;smtp.qiye.aliyun.com&quot;;<br><br>    //邮箱授权码<br>    private static String AUTH_CODE = &quot;******&quot;;<br><br>    //发送邮箱号<br>    private static String SEND_EMAIL_NUMBER = &quot;******&quot;;<br><br>    /**<br>     * 发送邮件<br>     *<br>     * @param toSendEmail  接收人<br>     * @param title        邮件标题<br>     * @param content      内容<br>     * @param appendix     附件<br>     * @param appendixName 附件名<br>     * @param cc           抄送<br>     * @return boolean<br>     **/<br>    public static boolean sendEmail(String toSendEmail, String title, String content, String appendix, String appendixName, Set&lt;String&gt; cc) &#123;<br>        HtmlEmail htmlEmail = new HtmlEmail();<br>        htmlEmail.setHostName(SMTP_SERVER);<br>        htmlEmail.setCharset(&quot;utf-8&quot;);<br>        try &#123;<br>            htmlEmail.setFrom(SEND_EMAIL_NUMBER, &quot;发件人&quot;);<br>            htmlEmail.setAuthentication(SEND_EMAIL_NUMBER, AUTH_CODE);<br>            htmlEmail.setSocketConnectionTimeout(5000);<br>            htmlEmail.setSocketTimeout(5000);<br>            htmlEmail.setSSLOnConnect(true);<br>            htmlEmail.addTo(toSendEmail);<br>            htmlEmail.setSubject(title);<br>            htmlEmail.setMsg(content);<br>            //如果附件不为空，添加附件<br>            if (ObjectUtil.isNotEmpty(appendix)) &#123;<br>                htmlEmail.embed(appendix, appendixName);<br>            &#125;<br>            //如果抄送人不为空，添加抄送人<br>            if (ObjectUtil.isNotEmpty(cc)) &#123;<br>                for (String s : cc) &#123;<br>                    htmlEmail.addCc(s);<br>                &#125;<br>            &#125;<br><br>            htmlEmail.send();<br>            return true;<br>        &#125; catch (EmailException e) &#123;<br>            log.error(&quot;邮件发送失败 错误码：&#123;&#125;&quot;, e);<br>            return false;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CV</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>nginx基础使用</title>
    <link href="/2021/04/22/nginx%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/04/22/nginx%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="nginx安装-centos"><a href="#nginx安装-centos" class="headerlink" title="nginx安装(centos)"></a>nginx安装(centos)</h3><ol><li>安装依赖</li></ol><p><code>yum -y install gcc gcc-c++ </code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel<br></code></pre></td></tr></table></figure><ol start="2"><li>使用wget命令下载安装包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -c https://nginx.org/download/nginx-1.18.0.tar.gz<br></code></pre></td></tr></table></figure><ol start="3"><li>解压缩</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf nginx-1.18.0.tar.gz<br>cd nginx-1.18.0<br></code></pre></td></tr></table></figure><ol start="4"><li>编译安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --prefix=/usr/local/nginx<br>make<br>make install<br></code></pre></td></tr></table></figure><ol start="5"><li>nginx目录结构</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">conf #用来存放配置文件相关<br>html #用来存放静态文件的默认目录结构<br>sbin #nginx的主程序<br>logs #存放日志相关的<br></code></pre></td></tr></table></figure><ol start="6"><li>启动nginx</li></ol><p>进入安装好的目录&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">./nginx #启动<br>./nginx -s stop #快速停止<br>./nginx -s quit #优雅关闭，在退出前完成已经接受的连接请求<br>./nginx -s reload #重新加载配置<br></code></pre></td></tr></table></figure><h3 id="将nginx配置成系统服务"><a href="#将nginx配置成系统服务" class="headerlink" title="将nginx配置成系统服务"></a>将nginx配置成系统服务</h3><ol><li>创建服务脚本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/lib/systemd/system/nginx.service<br></code></pre></td></tr></table></figure><ol start="2"><li>服务脚本内容</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=nginx - web server<br>After=network.target remote-fs.target nss-lookup.target<br>[Service]<br>Type=forking<br>PIDFile=/usr/local/nginx/logs/nginx.pid<br>ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf<br>ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf<br>ExecReload=/usr/local/nginx/sbin/nginx -s reload<br>ExecStop=/usr/local/nginx/sbin/nginx -s stop<br>ExecQuit=/usr/local/nginx/sbin/nginx -s quit<br>PrivateTmp=true<br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><ol start="3"><li>重新加载系统服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl daemon-reload<br></code></pre></td></tr></table></figure><ol start="4"><li>启动服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start nginx.service<br></code></pre></td></tr></table></figure><ol start="5"><li>设置开机启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable nginx.service<br></code></pre></td></tr></table></figure><h3 id="关于防火墙"><a href="#关于防火墙" class="headerlink" title="关于防火墙"></a>关于防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">开启防火墙</span><br>systemctl start firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭防火墙</span><br>systemctl stop firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启防火墙</span><br>systemctl restart firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">禁止防火墙开机启动</span><br>systemctl disable firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看已配置规则</span><br>firewall-cmd --list-all<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">放行端口</span><br>firewall-cmd --zone=public --add-port=80/tcp --permanent<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置指定端口和IP访问</span><br>firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.44.101&quot;<br>port protocol=&quot;tcp&quot; port=&quot;8080&quot; accept&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">移除规则</span><br>firewall-cmd --permanent --remove-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.44.101&quot; port port=&quot;8080&quot; protocol=&quot;tcp&quot; accept&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重载规则</span><br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><h4 id="最小配置"><a href="#最小配置" class="headerlink" title="最小配置"></a>最小配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">worker_processes 1 #默认为1，表示开启一个业务进程<br><br>worker_connections 1024 #单个业务进程可接受连接数<br><br>include mime.types #引入http mime类型<br><br>default_type application/octet-stream #如果mime类型没匹配上，默认使用二进制流的方式传输<br><br>sendfile on #使用linux的sendfile(socket,file,len)高效网络传输，也就是数据0拷贝<br><br>keepalive_timeout 65 ##设置nginx开启keepalive，超时时间为65秒，也就是说：如果客户端65秒内没有后续的请求过来，nginx就会断掉这个TCP连接，设置为0表示禁用keepalive<br><br>keepalive_requests 100 #设置长连接能够处理请求的次数，100表示：一个长连接nginx最多处理100次请求就会关闭。<br><br>keepalive 20 #这个值必须设置，默认为0. 设置每个worker可以保持长连接空闲时的最大连接数。<br><br>server #虚拟主机配置，原本一台服务器只能对应一个站点，通过虚拟主机技术可以虚拟化成多个站点同时对外提供服务<br></code></pre></td></tr></table></figure><h4 id="虚拟主机server配置"><a href="#虚拟主机server配置" class="headerlink" title="虚拟主机server配置"></a>虚拟主机server配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>listen 80; 监听端口号<br><span class="hljs-meta prompt_">#</span><span class="language-bash">server_name匹配规则</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1.分先后顺序，前面的匹配上就不会匹配后面的了</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.完整匹配，可以同事配置多个域名server_name vod.abc.com www1.abc.com;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3.通配符匹配，server_name *.abc.com vod.*</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4.正则匹配 server_name ~^[0-9]+\.abc\.com$</span><br>server_name localhost; #主机名<br>location / &#123; #匹配路径<br>root html; #文件根目录<br>index index.html index.htm; #默认页名称<br>&#125;<br>error_page 500 502 503 504 /50x.html; #报错编码对应页面<br>location = /50x.html &#123;<br>root html;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>在location下配置proxy_pass</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">location / &#123;<br>proxy_pass http://baidu.com;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="基于反向代理的负载均衡"><a href="#基于反向代理的负载均衡" class="headerlink" title="基于反向代理的负载均衡"></a>基于反向代理的负载均衡</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream httpd &#123;<br>server 102.168.44.102:80;<br>server 192.168.44.103:80;<br>&#125;<br><br>location / &#123;<br>proxy_pass http://httpd;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h5><ol><li>轮询，默认情况下使用轮询方式，逐一转发，这种方式适用于无状态请求。</li><li>weight(权重)，指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream httpd &#123;<br>server 127.0.0.1:8050 weight=10 down;<br>server 127.0.0.1:8060 weight=1;<br>server 127.0.0.1:8060 weight=1 backup;<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">down：表示当前的server暂时不参与负载</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">weight：默认为1.weight越大，负载的权重就越大。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。</span><br></code></pre></td></tr></table></figure><ol start="3"><li>ip_hash，根据客户端的ip地址转发同一台服务器，可以保持回话。</li><li>least_conn，最少连接访问</li><li>url_hash，根据用户访问的url定向转发请求</li><li>fair，根据后端服务器响应时间转发请求</li></ol><h4 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h4><p>使用nginx代理静态资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">location / &#123;<br>proxy_pass http://127.0.0.1:8080;<br>&#125;<br>location /css &#123;<br>root /usr/local/nginx/static;<br>index index.html index.htm;<br>&#125;<br>location /images &#123;<br>root /usr/local/nginx/static;<br>index index.html index.htm;<br>&#125;<br>location /js &#123;<br>root /usr/local/nginx/static;<br>index index.html index.htm;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用一个location</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">/ 通用匹配，任何请求都会匹配到。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">= 精准匹配，不是以指定模式开头</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">~ 正则匹配，区分大小写</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">~* 正则匹配，不区分大小写</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">^~ 非正则匹配，匹配以指定模式开头的location</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">location匹配顺序</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">多个正则location直接按书写顺序匹配，成功后就不会继续往后面匹配</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">普通（非正则）location会一直往下，直到找到匹配度最高的（最大前缀匹配）</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">当普通location与正则location同时存在，如果正则匹配成功,则不会再执行普通匹配</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">所有类型location存在时，“=”匹配 &gt; “^~”匹配 &gt; 正则匹配 &gt; 普通（最大前缀匹配）</span><br>location ~*/(css|img|js) &#123;<br>root /usr/local/nginx/static;<br>index index.html index.htm;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="alias与root"><a href="#alias与root" class="headerlink" title="alias与root"></a>alias与root</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">location /css &#123;<br>alias /usr/local/nginx/static/css;<br>index index.html index.htm;<br>&#125;<br></code></pre></td></tr></table></figure><p>root用来设置根目录，而alias在接受请求的时候在路径上不会加上location。</p><ol><li><p>alias指定的目录是准确的，即location匹配访问的path目录下的文件直接是在alias目录下查找的； </p></li><li><p>root指定的目录是location匹配访问的path目录的上一级目录,这个path目录一定要是真实存在root指定目录下的；</p></li><li><p>使用alias标签的目录块中不能使用rewrite的break（具体原因不明）；另外，alias指定的目录后面必须要加上”&#x2F;“符号！</p></li><li><p>alias虚拟目录配置中，location匹配的path目录如果后面不带”&#x2F;“，那么访问的url地址中这个path目录后面加不加”&#x2F;“不影响访问，访问时它会自动加上”&#x2F;“； 但是如果location匹配的path目录后面加上”&#x2F;“，那么访问的url地<br>址中这个path目录必须要加上”&#x2F;“，访问时它不会自动加上”&#x2F;“。如果不加上”&#x2F;“，访问就会失败！</p></li><li><p>root目录配置中，location匹配的path目录后面带不带”&#x2F;“，都不会影响访问</p></li></ol><h4 id="UrlRewrite"><a href="#UrlRewrite" class="headerlink" title="UrlRewrite"></a>UrlRewrite</h4><h5 id="rewrite语法格式及参数语法"><a href="#rewrite语法格式及参数语法" class="headerlink" title="rewrite语法格式及参数语法"></a>rewrite语法格式及参数语法</h5><p>rewrite是实现URL重写的关键指令，根据regex (正则表达式)部分内容，重定向到replacement，结尾是flag标记。<br>rewrite  <regex>  <replacement> [flag];<br>关键字 正则 替代内容 flag标记<br>关键字：rewrite<br>正则：perl兼容正则表达式语句进行规则匹配<br>替代内容：将正则匹配的内容替换成replacement<br>flag标记：rewrite支持的flag标记<br>rewrite参数的标签段位置：server,location,if<br>flag标记说明：</p><ul><li>last #本条规则匹配完成后</li><li>break #本条规则匹配完成即终止，不再匹配后面的任何规则</li><li>redirect #返回302临时重定向，浏览器地址会显示跳转后的URL地址</li><li>permanent #返回301永久重定向，浏览器地址栏会显示跳转后的URL地址</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rewrite ^/([0-9]+).html$ /index.jsp?pageNum=$1 break;<br></code></pre></td></tr></table></figure><h5 id="网关配置"><a href="#网关配置" class="headerlink" title="网关配置"></a>网关配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>upstream httpds &#123;<br>server 192.168.44.102 weight=8 down;<br>server 192.168.44.103:8080 weight=2;<br>server 192.168.44.104:8080 weight=1 backup;<br>&#125;<br>location / &#123;<br>rewrite ^/([0-9]+).html$ /index.jsp?pageNum=$1 break;<br>proxy_pass http://httpds ;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">访问http://网关IP:端口号/1.html相当于访问http://网关IP:端口号/index.jsp?pageNum=1</span><br></code></pre></td></tr></table></figure><h4 id="防盗链配置"><a href="#防盗链配置" class="headerlink" title="防盗链配置"></a>防盗链配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">valid_referers none | blocked | server_names | strings ....;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">1. none， 检测 Referer 头域不存在的情况。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2. blocked，检测 Referer 头域的值被防火墙或者代理服务器删除或伪装的情况。这种情况该头域的值不以 “http://” 或 “https://” 开头。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3. server_names ，设置一个或多个 URL ，检测 Referer 头域的值是否是这些 URL 中的某一个。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在需要防盗链的location中配置</span><br>valid_referers 192.168.44.101;<br>if ($invalid_referer) &#123;<br>return 403; #若referer未带192.168.44.101直接返回403<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用curl测试</span><br>curl -I http://192.168.44.101/img/logo.png<br><span class="hljs-meta prompt_">#</span><span class="language-bash">带referer引用</span><br>curl -e &quot;http://baidu.com&quot; -I http://192.168.44.101/img/logo.png<br></code></pre></td></tr></table></figure><h4 id="高可用配置"><a href="#高可用配置" class="headerlink" title="高可用配置"></a>高可用配置</h4><h5 id="安装Keepalived"><a href="#安装Keepalived" class="headerlink" title="安装Keepalived"></a>安装Keepalived</h5><h6 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h6><ol><li>下载地址</li></ol><p><a href="https://www.keepalived.org/download.html#">https://www.keepalived.org/download.html#</a></p><ol start="2"><li>使用.&#x2F;configure编译安装</li></ol><p>如有报错提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">configure: error:<br>!!! OpenSSL is not properly installed on your system. !!!<br>!!! Can not include OpenSSL headers files. !!!<br></code></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install openssl-devel<br></code></pre></td></tr></table></figure><h6 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install keepalived<br></code></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>使用yum安装后配置文件在&#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</p><h6 id="最小配置-1"><a href="#最小配置-1" class="headerlink" title="最小配置"></a>最小配置</h6><ol><li>第一台机器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">! Configuration File for keepalived<br>global_defs &#123;<br>router_id lb111<br>&#125;<br>vrrp_instance sunguigu &#123;<br>state MASTER<br>interface ens33<br>virtual_router_id 51<br>priority 100<br>advert_int 1<br>authentication &#123;<br>auth_type PASS<br>auth_pass 1111<br>&#125;<br>virtual_ipaddress &#123;<br>192.168.44.200<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>第二台机器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">! Configuration File for keepalived<br>global_defs &#123;<br>router_id lb110<br>&#125;<br>vrrp_instance sunguigu &#123;<br>state BACKUP<br>interface ens33<br>virtual_router_id 51<br>priority 50<br>advert_int 1<br>authentication &#123;<br>auth_type PASS<br>auth_pass 1111<br>&#125;<br>virtual_ipaddress &#123;<br>192.168.44.200<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>启动服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start keepalived<br></code></pre></td></tr></table></figure><ol start="4"><li>访问自定义的IP192.168.44.200，当主机挂掉后第二台备用机会顶上实现服务的高可用</li></ol><h4 id="https证书配置"><a href="#https证书配置" class="headerlink" title="https证书配置"></a>https证书配置</h4><ol><li>域名申请ca签名获取证书</li><li>上传证书创建证书相关文件夹</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /etc/nginx/cert<br></code></pre></td></tr></table></figure><ol start="3"><li>修改nginx.conf配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>    listen 443 ssl; #监听443端口<br>    server_name xxx.com; <br>    root html;<br>    index index.html index.htm;<br>    ssl_certificate  /usr/local/nginx/cert/xxx.pem; #证书地址<br>    ssl_certificate_key /usr/local/nginx/cert/xxx.key; #证书私钥地址<br>    ssl_session_timeout 5m;<br>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>    ssl_prefer_server_ciphers on;<br>    location / &#123;<br>        index index.html index.htm;<br>    &#125;<br>&#125;<br>server &#123;<br>    listen 80;<br>    server_name xxx.com;<br>    rewrite ^(.*)$ https://$host:443$1 permanent; #把http的域名请求转成https且转发到443端口<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="4"><li>重启nginx</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入sbin目录，执行</span><br>./nginx -s reload<br></code></pre></td></tr></table></figure><p>如果有报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx: [emerg] the &quot;ssl&quot; parameter requires ngx_http_ssl_module in /usr/local/nginx/conf/vhost/crm.conf:3<br></code></pre></td></tr></table></figure><p>备份sbin执行文件，关闭nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp nginx nginx.bak<br>nginx -s quit<br></code></pre></td></tr></table></figure><p>重新进入源码包，执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module<br><br>make<br><br>make install<br></code></pre></td></tr></table></figure><p>进入sbin目录，执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">./nginx -V<br><br>nginx version: nginx/1.16.1<br>built by gcc 8.5.0 20210514 (Red Hat 8.5.0-4) (GCC) <br>built with OpenSSL 1.1.1k  FIPS 25 Mar 2021<br>TLS SNI support enabled<br>configure arguments: --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module<br><br></code></pre></td></tr></table></figure><p>重新启动nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./nginx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《MySQL45讲》day1</title>
    <link href="/2021/02/25/%E3%80%8AMySQL45%E8%AE%B2%E3%80%8Bday1/"/>
    <url>/2021/02/25/%E3%80%8AMySQL45%E8%AE%B2%E3%80%8Bday1/</url>
    
    <content type="html"><![CDATA[<h3 id="MySQL基本架构"><a href="#MySQL基本架构" class="headerlink" title="MySQL基本架构"></a>MySQL基本架构</h3><ul><li><p>MySQL可以分为Server层和存储引擎层两部分。</p></li><li><p>Server层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖MySQL的大多数核心服务功能，以及所有的内置函数（如日期、时间函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等</p></li><li><p>存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持InnoDB、MyISAM、Memory等多个存储引擎。常用存储引擎为InnoDB，支持事务型的。MyISAM不支持事务，常用于读多写少业务环境。在MySQL5.5.5版本开始InnoDB为默认存储引擎。可通过指定存储引擎的类型来选择别的引擎。如在create table语句中使用engine&#x3D;memory来指定使用内存存储引擎创建表。</p><p><img src="https://zxj-res.oss-cn-hangzhou.aliyuncs.com/imgloc/2023325/ftjje20zue-1679714850269.png" alt="1679714850269"></p></li></ul><h4 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h4><p>连接器负责和客户端建立连接、获取权限、维持和管理连接</p><h4 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h4><p>当连接建立完成后，执行select语句会首先来到查询缓存。<br>MySQL拿到一个查询请求后，会先到查询缓存中查看之前是否执行过该语句。之前执行过的语句及其结果可能会以key-value对形式被缓存在内存中。key是查询的语句，value是查询的结果。如果查询缓存直接命中，这个value会被直接返回给客户端。<br>如果没有命中，继续执行后续流程。执行完成后，执行结果被存入查询缓存中。MySQL8.0后查询缓存被整体删除。</p><h4 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h4><p>如果查询缓存没有命中，就要开始真正执行语句。首先对SQL语句做解析。<br>分析器先会做“词法分析”。输入的是由多个字符串和空格组成的一条SQL语句，MySQL需要识别出里面的字符串分别是什么，代表什么。</p><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><p>经过了分析器的分析，在开始执行之前，还需要经过优化器的处理。<br>优化器是在表里面有多个索引时，决定使用哪个索引；或者在一个语句有多表关联时，决定各个表的连接顺序。</p><h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><p>优化器阶段完成后，进入执行器阶段开始执行语句。<br>开始执行的时候，要先判断下客户端对这个表有没有执行的权限，如果没有，就会返回没有权限的错误，如果有权限，就打开表继续执行。打开表的时候，执行器会根据表的引擎定义，去使用这个引擎提供的接口。</p><h3 id="MySQL重要的日志模块"><a href="#MySQL重要的日志模块" class="headerlink" title="MySQL重要的日志模块"></a>MySQL重要的日志模块</h3><h4 id="redo-log（重做日志）"><a href="#redo-log（重做日志）" class="headerlink" title="redo log（重做日志）"></a>redo log（重做日志）</h4><p>redo log是InnoDB引擎特有的日志，当有一条记录需要更新时，InnoDB引擎会先把记录写到redo log里面，并更新内存，这时候更新就算完成了。同时，InnoDB引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做的。<br>redo log是固定大小的，比如可以配置为一组4个文件，每个文件的大小是1GB，那么总共可以记录4GB的操作。从头开始写，写到末尾就又回到开头循环写。<br>有了redo log，InnoDB就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为crash-safe.<br>redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成1的时候，表示每次事务的 redo log 都直接持久化到磁盘。可以保证 MySQL 异常重启之后数据不丢失。</p><h4 id="bin-log（归档日志）"><a href="#bin-log（归档日志）" class="headerlink" title="bin log（归档日志）"></a>bin log（归档日志）</h4><p>bin log有两种模式，statement格式是记sql语句，row格式会记录行的内容，记两条，更新前和更新后都有。<br>bin log是MySQL的Server层实现的，所有引擎都可以使用。<br>sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。保证 MySQL 异常重启之后 binlog 不丢失。</p><h4 id="redo-log与bin-log的区别："><a href="#redo-log与bin-log的区别：" class="headerlink" title="redo log与bin log的区别："></a>redo log与bin log的区别：</h4><ol><li><p>redo log是InnoDB引擎特有的；bin log是MySQL的Server层实现的，所有引擎都可以使用</p></li><li><p>redo log是物理日志，记录的是“在某个数据页上做了什么修改”；bin log是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID&#x3D;2这一行的c字段加1”</p></li><li><p>redo log是循环写的，空间固定会用完；bin log是可以追加写入的。“追加写”是指bin log文件写到一定大小后会切换到下一个，并不会覆盖以前的日志</p></li></ol><h4 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h4><p>两阶段提交是指MySQL在执行更新操作时，引擎将新数据更新到内存后，同时将更新操作记录到redo log里面，此时redo log处于prepare状态。然后告知执行器执行完成了，随时可以提交事务。执行器生成这个操作的binlog，并将binlog写入磁盘。执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改成提交（commit）状态，更新完成。<br>两阶段提交是跨系统维持数据逻辑一致性时常用的一个方案。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx下载与安装</title>
    <link href="/2021/02/15/nginx%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <url>/2021/02/15/nginx%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h3 id="下载并解压安装包"><a href="#下载并解压安装包" class="headerlink" title="下载并解压安装包"></a>下载并解压安装包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install wget<br><br>wget https://nginx.org/download/nginx-1.16.1.tar.gz<br><br>tar -zxvf nginx-1.16.1.tar.gz<br><br></code></pre></td></tr></table></figure><h3 id="将解压的文件夹改名并移动位置到-x2F-usr-x2F-local-x2F-nginx"><a href="#将解压的文件夹改名并移动位置到-x2F-usr-x2F-local-x2F-nginx" class="headerlink" title="将解压的文件夹改名并移动位置到&#x2F;usr&#x2F;local&#x2F;nginx"></a>将解压的文件夹改名并移动位置到&#x2F;usr&#x2F;local&#x2F;nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv nginx-1.16.1 nginx<br><br>mv nginx/ /usr/local/<br></code></pre></td></tr></table></figure><h3 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install gcc openssl openssl-devel pcre-devel zlib zlib-devel<br></code></pre></td></tr></table></figure><h3 id="cd到nginx目录下，执行-x2F-configure"><a href="#cd到nginx目录下，执行-x2F-configure" class="headerlink" title="cd到nginx目录下，执行.&#x2F;configure"></a>cd到nginx目录下，执行.&#x2F;configure</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nginx<br><br>./configure<br></code></pre></td></tr></table></figure><h3 id="执行make和make-install命令"><a href="#执行make和make-install命令" class="headerlink" title="执行make和make install命令"></a>执行make和make install命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">make<br><br>make install<br></code></pre></td></tr></table></figure><h3 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nginx/sbin<br><br>./nginx <br><br>ps -ef|grep nginx<br><br>./nginx -s reload<br><br>./nginx -s stop<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo初入坑</title>
    <link href="/2021/01/15/hexo%E5%88%9D%E5%85%A5%E5%9D%91/"/>
    <url>/2021/01/15/hexo%E5%88%9D%E5%85%A5%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ul><li>node.js（版本在12以上）</li><li>git</li></ul><h4 id="GitHub创建仓库"><a href="#GitHub创建仓库" class="headerlink" title="GitHub创建仓库"></a>GitHub创建仓库</h4><ol><li>在github上创建username.github.io的仓库（username为github用户名）</li><li>在设置中生成token替代密码使用</li></ol><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo<br></code></pre></td></tr></table></figure><h3 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init<br><span class="hljs-meta prompt_"># </span><span class="language-bash">hexo会自动下载所需文件在当前目录下</span><br></code></pre></td></tr></table></figure><h3 id="配置fluid主题"><a href="#配置fluid主题" class="headerlink" title="配置fluid主题"></a>配置fluid主题</h3><ol><li>使用npm安装主题</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>在node_moduels目录找到该主题，复制_config.yml到博客主目录下，可以改名_config.fluid.yml，修改博客主目录下_config.yml中的配置theme:landscape改为theme:fluid，language改为zh-CN</p><h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><ol><li>修改博客根目录下的_config.yml文件中的deploy<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">deploy:<br>  type: git<br>  repo: https://github.com/username/username.github.io<br>  branch: master<br>  token: ******(前面生成的token)<br></code></pre></td></tr></table></figure></li><li>安装插件 hexo-deployer-git<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li>执行hexo d并在命令行输入github用户名和准备好的token</li><li>打开 <a href="https://username.github.io/">https://username.github.io</a> 查看是否部署成功</li></ol><h3 id="常用Hexo命令"><a href="#常用Hexo命令" class="headerlink" title="常用Hexo命令"></a>常用Hexo命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new &quot;post&quot;      # 新建文章<br>hexo new page &quot;page&quot; # 新建页面<br>hexo generate            # 生成静态页面至public目录<br>hexo server              # 开启预览访问端口（默认端口4000）<br>hexo deploy              # 部署到GitHub<br>hexo help                # 查看帮助<br>hexo version             # 查看Hexo的版本<br>hexo clean<br>缩写命令：<br>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy<br>组合命令：<br>hexo s -g   # 生成并本地预览<br>hexo d -g   # 生成并上传<br></code></pre></td></tr></table></figure><h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ol><li>hexo中文文档地址  <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></li><li>fluid用户手册 <a href="https://hexo.fluid-dev.com/docs/start/">https://hexo.fluid-dev.com/docs/start/</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/14/hello-world/"/>
    <url>/2021/01/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
