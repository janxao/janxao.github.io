<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>nginx基础使用</title>
    <link href="/2021/04/22/nginx%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/04/22/nginx%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="nginx安装-centos"><a href="#nginx安装-centos" class="headerlink" title="nginx安装(centos)"></a>nginx安装(centos)</h3><ol><li>安装依赖</li></ol><p><code>yum -y install gcc gcc-c++ </code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel<br></code></pre></td></tr></table></figure><ol start="2"><li>使用wget命令下载安装包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -c https://nginx.org/download/nginx-1.18.0.tar.gz<br></code></pre></td></tr></table></figure><ol start="3"><li>解压缩</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf nginx-1.18.0.tar.gz<br>cd nginx-1.18.0<br></code></pre></td></tr></table></figure><ol start="4"><li>编译安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --prefix=/usr/local/nginx<br>make<br>make install<br></code></pre></td></tr></table></figure><ol start="5"><li>nginx目录结构</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">conf #用来存放配置文件相关<br>html #用来存放静态文件的默认目录结构<br>sbin #nginx的主程序<br>logs #存放日志相关的<br></code></pre></td></tr></table></figure><ol start="6"><li>启动nginx</li></ol><p>进入安装好的目录&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">./nginx #启动<br>./nginx -s stop #快速停止<br>./nginx -s quit #优雅关闭，在退出前完成已经接受的连接请求<br>./nginx -s reload #重新加载配置<br></code></pre></td></tr></table></figure><h3 id="将nginx配置成系统服务"><a href="#将nginx配置成系统服务" class="headerlink" title="将nginx配置成系统服务"></a>将nginx配置成系统服务</h3><ol><li>创建服务脚本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/lib/systemd/system/nginx.service<br></code></pre></td></tr></table></figure><ol start="2"><li>服务脚本内容</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=nginx - web server<br>After=network.target remote-fs.target nss-lookup.target<br>[Service]<br>Type=forking<br>PIDFile=/usr/local/nginx/logs/nginx.pid<br>ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf<br>ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf<br>ExecReload=/usr/local/nginx/sbin/nginx -s reload<br>ExecStop=/usr/local/nginx/sbin/nginx -s stop<br>ExecQuit=/usr/local/nginx/sbin/nginx -s quit<br>PrivateTmp=true<br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><ol start="3"><li>重新加载系统服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl daemon-reload<br></code></pre></td></tr></table></figure><ol start="4"><li>启动服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start nginx.service<br></code></pre></td></tr></table></figure><ol start="5"><li>设置开机启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable nginx.service<br></code></pre></td></tr></table></figure><h3 id="关于防火墙"><a href="#关于防火墙" class="headerlink" title="关于防火墙"></a>关于防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">开启防火墙</span><br>systemctl start firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭防火墙</span><br>systemctl stop firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启防火墙</span><br>systemctl restart firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">禁止防火墙开机启动</span><br>systemctl disable firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看已配置规则</span><br>firewall-cmd --list-all<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">放行端口</span><br>firewall-cmd --zone=public --add-port=80/tcp --permanent<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置指定端口和IP访问</span><br>firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.44.101&quot;<br>port protocol=&quot;tcp&quot; port=&quot;8080&quot; accept&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">移除规则</span><br>firewall-cmd --permanent --remove-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.44.101&quot; port port=&quot;8080&quot; protocol=&quot;tcp&quot; accept&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重载规则</span><br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><h4 id="最小配置"><a href="#最小配置" class="headerlink" title="最小配置"></a>最小配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">worker_processes 1 #默认为1，表示开启一个业务进程<br><br>worker_connections 1024 #单个业务进程可接受连接数<br><br>include mime.types #引入http mime类型<br><br>default_type application/octet-stream #如果mime类型没匹配上，默认使用二进制流的方式传输<br><br>sendfile on #使用linux的sendfile(socket,file,len)高效网络传输，也就是数据0拷贝<br><br>keepalive_timeout 65 ##设置nginx开启keepalive，超时时间为65秒，也就是说：如果客户端65秒内没有后续的请求过来，nginx就会断掉这个TCP连接，设置为0表示禁用keepalive<br><br>keepalive_requests 100 #设置长连接能够处理请求的次数，100表示：一个长连接nginx最多处理100次请求就会关闭。<br><br>keepalive 20 #这个值必须设置，默认为0. 设置每个worker可以保持长连接空闲时的最大连接数。<br><br>server #虚拟主机配置，原本一台服务器只能对应一个站点，通过虚拟主机技术可以虚拟化成多个站点同时对外提供服务<br></code></pre></td></tr></table></figure><h4 id="虚拟主机server配置"><a href="#虚拟主机server配置" class="headerlink" title="虚拟主机server配置"></a>虚拟主机server配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>listen 80; 监听端口号<br><span class="hljs-meta prompt_">#</span><span class="language-bash">server_name匹配规则</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1.分先后顺序，前面的匹配上就不会匹配后面的了</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.完整匹配，可以同事配置多个域名server_name vod.abc.com www1.abc.com;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3.通配符匹配，server_name *.abc.com vod.*</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4.正则匹配 server_name ~^[0-9]+\.abc\.com$</span><br>server_name localhost; #主机名<br>location / &#123; #匹配路径<br>root html; #文件根目录<br>index index.html index.htm; #默认页名称<br>&#125;<br>error_page 500 502 503 504 /50x.html; #报错编码对应页面<br>location = /50x.html &#123;<br>root html;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>在location下配置proxy_pass</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">location / &#123;<br>proxy_pass http://baidu.com;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="基于反向代理的负载均衡"><a href="#基于反向代理的负载均衡" class="headerlink" title="基于反向代理的负载均衡"></a>基于反向代理的负载均衡</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream httpd &#123;<br>server 102.168.44.102:80;<br>server 192.168.44.103:80;<br>&#125;<br><br>location / &#123;<br>proxy_pass http://httpd;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h5><ol><li>轮询，默认情况下使用轮询方式，逐一转发，这种方式适用于无状态请求。</li><li>weight(权重)，指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream httpd &#123;<br>server 127.0.0.1:8050 weight=10 down;<br>server 127.0.0.1:8060 weight=1;<br>server 127.0.0.1:8060 weight=1 backup;<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">down：表示当前的server暂时不参与负载</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">weight：默认为1.weight越大，负载的权重就越大。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。</span><br></code></pre></td></tr></table></figure><ol start="3"><li>ip_hash，根据客户端的ip地址转发同一台服务器，可以保持回话。</li><li>least_conn，最少连接访问</li><li>url_hash，根据用户访问的url定向转发请求</li><li>fair，根据后端服务器响应时间转发请求</li></ol><h4 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h4><p>使用nginx代理静态资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">location / &#123;<br>proxy_pass http://127.0.0.1:8080;<br>&#125;<br>location /css &#123;<br>root /usr/local/nginx/static;<br>index index.html index.htm;<br>&#125;<br>location /images &#123;<br>root /usr/local/nginx/static;<br>index index.html index.htm;<br>&#125;<br>location /js &#123;<br>root /usr/local/nginx/static;<br>index index.html index.htm;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用一个location</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">/ 通用匹配，任何请求都会匹配到。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">= 精准匹配，不是以指定模式开头</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">~ 正则匹配，区分大小写</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">~* 正则匹配，不区分大小写</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">^~ 非正则匹配，匹配以指定模式开头的location</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">location匹配顺序</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">多个正则location直接按书写顺序匹配，成功后就不会继续往后面匹配</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">普通（非正则）location会一直往下，直到找到匹配度最高的（最大前缀匹配）</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">当普通location与正则location同时存在，如果正则匹配成功,则不会再执行普通匹配</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">所有类型location存在时，“=”匹配 &gt; “^~”匹配 &gt; 正则匹配 &gt; 普通（最大前缀匹配）</span><br>location ~*/(css|img|js) &#123;<br>root /usr/local/nginx/static;<br>index index.html index.htm;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="alias与root"><a href="#alias与root" class="headerlink" title="alias与root"></a>alias与root</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">location /css &#123;<br>alias /usr/local/nginx/static/css;<br>index index.html index.htm;<br>&#125;<br></code></pre></td></tr></table></figure><p>root用来设置根目录，而alias在接受请求的时候在路径上不会加上location。</p><ol><li><p>alias指定的目录是准确的，即location匹配访问的path目录下的文件直接是在alias目录下查找的； </p></li><li><p>root指定的目录是location匹配访问的path目录的上一级目录,这个path目录一定要是真实存在root指定目录下的；</p></li><li><p>使用alias标签的目录块中不能使用rewrite的break（具体原因不明）；另外，alias指定的目录后面必须要加上”&#x2F;“符号！</p></li><li><p>alias虚拟目录配置中，location匹配的path目录如果后面不带”&#x2F;“，那么访问的url地址中这个path目录后面加不加”&#x2F;“不影响访问，访问时它会自动加上”&#x2F;“； 但是如果location匹配的path目录后面加上”&#x2F;“，那么访问的url地<br>址中这个path目录必须要加上”&#x2F;“，访问时它不会自动加上”&#x2F;“。如果不加上”&#x2F;“，访问就会失败！</p></li><li><p>root目录配置中，location匹配的path目录后面带不带”&#x2F;“，都不会影响访问</p></li></ol><h4 id="UrlRewrite"><a href="#UrlRewrite" class="headerlink" title="UrlRewrite"></a>UrlRewrite</h4><h5 id="rewrite语法格式及参数语法"><a href="#rewrite语法格式及参数语法" class="headerlink" title="rewrite语法格式及参数语法"></a>rewrite语法格式及参数语法</h5><p>rewrite是实现URL重写的关键指令，根据regex (正则表达式)部分内容，重定向到replacement，结尾是flag标记。<br>rewrite  <regex>  <replacement> [flag];<br>关键字 正则 替代内容 flag标记<br>关键字：rewrite<br>正则：perl兼容正则表达式语句进行规则匹配<br>替代内容：将正则匹配的内容替换成replacement<br>flag标记：rewrite支持的flag标记<br>rewrite参数的标签段位置：server,location,if<br>flag标记说明：</p><ul><li>last #本条规则匹配完成后</li><li>break #本条规则匹配完成即终止，不再匹配后面的任何规则</li><li>redirect #返回302临时重定向，浏览器地址会显示跳转后的URL地址</li><li>permanent #返回301永久重定向，浏览器地址栏会显示跳转后的URL地址</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rewrite ^/([0-9]+).html$ /index.jsp?pageNum=$1 break;<br></code></pre></td></tr></table></figure><h5 id="网关配置"><a href="#网关配置" class="headerlink" title="网关配置"></a>网关配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>upstream httpds &#123;<br>server 192.168.44.102 weight=8 down;<br>server 192.168.44.103:8080 weight=2;<br>server 192.168.44.104:8080 weight=1 backup;<br>&#125;<br>location / &#123;<br>rewrite ^/([0-9]+).html$ /index.jsp?pageNum=$1 break;<br>proxy_pass http://httpds ;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">访问http://网关IP:端口号/1.html相当于访问http://网关IP:端口号/index.jsp?pageNum=1</span><br></code></pre></td></tr></table></figure><h4 id="防盗链配置"><a href="#防盗链配置" class="headerlink" title="防盗链配置"></a>防盗链配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">valid_referers none | blocked | server_names | strings ....;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">1. none， 检测 Referer 头域不存在的情况。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2. blocked，检测 Referer 头域的值被防火墙或者代理服务器删除或伪装的情况。这种情况该头域的值不以 “http://” 或 “https://” 开头。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3. server_names ，设置一个或多个 URL ，检测 Referer 头域的值是否是这些 URL 中的某一个。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在需要防盗链的location中配置</span><br>valid_referers 192.168.44.101;<br>if ($invalid_referer) &#123;<br>return 403; #若referer未带192.168.44.101直接返回403<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用curl测试</span><br>curl -I http://192.168.44.101/img/logo.png<br><span class="hljs-meta prompt_">#</span><span class="language-bash">带referer引用</span><br>curl -e &quot;http://baidu.com&quot; -I http://192.168.44.101/img/logo.png<br></code></pre></td></tr></table></figure><h4 id="高可用配置"><a href="#高可用配置" class="headerlink" title="高可用配置"></a>高可用配置</h4><h5 id="安装Keepalived"><a href="#安装Keepalived" class="headerlink" title="安装Keepalived"></a>安装Keepalived</h5><h6 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h6><ol><li>下载地址</li></ol><p><a href="https://www.keepalived.org/download.html#">https://www.keepalived.org/download.html#</a></p><ol start="2"><li>使用.&#x2F;configure编译安装</li></ol><p>如有报错提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">configure: error:<br>!!! OpenSSL is not properly installed on your system. !!!<br>!!! Can not include OpenSSL headers files. !!!<br></code></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install openssl-devel<br></code></pre></td></tr></table></figure><h6 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install keepalived<br></code></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>使用yum安装后配置文件在&#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</p><h6 id="最小配置-1"><a href="#最小配置-1" class="headerlink" title="最小配置"></a>最小配置</h6><ol><li>第一台机器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">! Configuration File for keepalived<br>global_defs &#123;<br>router_id lb111<br>&#125;<br>vrrp_instance sunguigu &#123;<br>state MASTER<br>interface ens33<br>virtual_router_id 51<br>priority 100<br>advert_int 1<br>authentication &#123;<br>auth_type PASS<br>auth_pass 1111<br>&#125;<br>virtual_ipaddress &#123;<br>192.168.44.200<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>第二台机器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">! Configuration File for keepalived<br>global_defs &#123;<br>router_id lb110<br>&#125;<br>vrrp_instance sunguigu &#123;<br>state BACKUP<br>interface ens33<br>virtual_router_id 51<br>priority 50<br>advert_int 1<br>authentication &#123;<br>auth_type PASS<br>auth_pass 1111<br>&#125;<br>virtual_ipaddress &#123;<br>192.168.44.200<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>启动服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start keepalived<br></code></pre></td></tr></table></figure><ol start="4"><li>访问自定义的IP192.168.44.200，当主机挂掉后第二台备用机会顶上实现服务的高可用</li></ol><h4 id="https证书配置"><a href="#https证书配置" class="headerlink" title="https证书配置"></a>https证书配置</h4><ol><li>域名申请ca签名获取证书</li><li>上传证书创建证书相关文件夹</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /etc/nginx/cert<br></code></pre></td></tr></table></figure><ol start="3"><li>修改nginx.conf配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>    listen 443 ssl; #监听443端口<br>    server_name xxx.com; <br>    root html;<br>    index index.html index.htm;<br>    ssl_certificate  /usr/local/nginx/cert/xxx.pem; #证书地址<br>    ssl_certificate_key /usr/local/nginx/cert/xxx.key; #证书私钥地址<br>    ssl_session_timeout 5m;<br>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>    ssl_prefer_server_ciphers on;<br>    location / &#123;<br>        index index.html index.htm;<br>    &#125;<br>&#125;<br>server &#123;<br>    listen 80;<br>    server_name xxx.com;<br>    rewrite ^(.*)$ https://$host:443$1 permanent; #把http的域名请求转成https且转发到443端口<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《MySQL45讲》day1</title>
    <link href="/2021/02/25/%E3%80%8AMySQL45%E8%AE%B2%E3%80%8Bday1/"/>
    <url>/2021/02/25/%E3%80%8AMySQL45%E8%AE%B2%E3%80%8Bday1/</url>
    
    <content type="html"><![CDATA[<h3 id="MySQL基本架构"><a href="#MySQL基本架构" class="headerlink" title="MySQL基本架构"></a>MySQL基本架构</h3><ul><li><p>MySQL可以分为Server层和存储引擎层两部分。</p></li><li><p>Server层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖MySQL的大多数核心服务功能，以及所有的内置函数（如日期、时间函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等</p></li><li><p>存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持InnoDB、MyISAM、Memory等多个存储引擎。常用存储引擎为InnoDB，支持事务型的。MyISAM不支持事务，常用于读多写少业务环境。在MySQL5.5.5版本开始InnoDB为默认存储引擎。可通过指定存储引擎的类型来选择别的引擎。如在create table语句中使用engine&#x3D;memory来指定使用内存存储引擎创建表。</p><p><img src="https://zxj-res.oss-cn-hangzhou.aliyuncs.com/imgloc/2023325/ftjje20zue-1679714850269.png" alt="1679714850269"></p></li></ul><h4 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h4><p>连接器负责和客户端建立连接、获取权限、维持和管理连接</p><h4 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h4><p>当连接建立完成后，执行select语句会首先来到查询缓存。<br>MySQL拿到一个查询请求后，会先到查询缓存中查看之前是否执行过该语句。之前执行过的语句及其结果可能会以key-value对形式被缓存在内存中。key是查询的语句，value是查询的结果。如果查询缓存直接命中，这个value会被直接返回给客户端。<br>如果没有命中，继续执行后续流程。执行完成后，执行结果被存入查询缓存中。MySQL8.0后查询缓存被整体删除。</p><h4 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h4><p>如果查询缓存没有命中，就要开始真正执行语句。首先对SQL语句做解析。<br>分析器先会做“词法分析”。输入的是由多个字符串和空格组成的一条SQL语句，MySQL需要识别出里面的字符串分别是什么，代表什么。</p><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><p>经过了分析器的分析，在开始执行之前，还需要经过优化器的处理。<br>优化器是在表里面有多个索引时，决定使用哪个索引；或者在一个语句有多表关联时，决定各个表的连接顺序。</p><h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><p>优化器阶段完成后，进入执行器阶段开始执行语句。<br>开始执行的时候，要先判断下客户端对这个表有没有执行的权限，如果没有，就会返回没有权限的错误，如果有权限，就打开表继续执行。打开表的时候，执行器会根据表的引擎定义，去使用这个引擎提供的接口。</p><h3 id="MySQL重要的日志模块"><a href="#MySQL重要的日志模块" class="headerlink" title="MySQL重要的日志模块"></a>MySQL重要的日志模块</h3><h4 id="redo-log（重做日志）"><a href="#redo-log（重做日志）" class="headerlink" title="redo log（重做日志）"></a>redo log（重做日志）</h4><p>redo log是InnoDB引擎特有的日志，当有一条记录需要更新时，InnoDB引擎会先把记录写到redo log里面，并更新内存，这时候更新就算完成了。同时，InnoDB引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做的。<br>redo log是固定大小的，比如可以配置为一组4个文件，每个文件的大小是1GB，那么总共可以记录4GB的操作。从头开始写，写到末尾就又回到开头循环写。<br>有了redo log，InnoDB就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为crash-safe.<br>redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成1的时候，表示每次事务的 redo log 都直接持久化到磁盘。可以保证 MySQL 异常重启之后数据不丢失。</p><p><img src="https://zxj-res.oss-cn-hangzhou.aliyuncs.com/imgloc/2023325/98gyf3r0ah-1679722539148.png" alt="1679722539148"></p><h4 id="bin-log（归档日志）"><a href="#bin-log（归档日志）" class="headerlink" title="bin log（归档日志）"></a>bin log（归档日志）</h4><p>bin log有两种模式，statement格式是记sql语句，row格式会记录行的内容，记两条，更新前和更新后都有。<br>bin log是MySQL的Server层实现的，所有引擎都可以使用。<br>sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。保证 MySQL 异常重启之后 binlog 不丢失。</p><h4 id="redo-log与bin-log的区别："><a href="#redo-log与bin-log的区别：" class="headerlink" title="redo log与bin log的区别："></a>redo log与bin log的区别：</h4><ol><li><p>redo log是InnoDB引擎特有的；bin log是MySQL的Server层实现的，所有引擎都可以使用</p></li><li><p>redo log是物理日志，记录的是“在某个数据页上做了什么修改”；bin log是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID&#x3D;2这一行的c字段加1”</p></li><li><p>redo log是循环写的，空间固定会用完；bin log是可以追加写入的。“追加写”是指bin log文件写到一定大小后会切换到下一个，并不会覆盖以前的日志</p><p><img src="https://zxj-res.oss-cn-hangzhou.aliyuncs.com/imgloc/2023325/yxwkar1nk4-1679722516372.png" alt="1679722516372"></p></li></ol><h4 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h4><p>两阶段提交是指MySQL在执行更新操作时，引擎将新数据更新到内存后，同时将更新操作记录到redo log里面，此时redo log处于prepare状态。然后告知执行器执行完成了，随时可以提交事务。执行器生成这个操作的binlog，并将binlog写入磁盘。执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改成提交（commit）状态，更新完成。<br>两阶段提交是跨系统维持数据逻辑一致性时常用的一个方案。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx下载与安装</title>
    <link href="/2021/02/15/nginx%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <url>/2021/02/15/nginx%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h3 id="下载并解压安装包"><a href="#下载并解压安装包" class="headerlink" title="下载并解压安装包"></a>下载并解压安装包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install wget<br><br>wget https://nginx.org/download/nginx-1.16.1.tar.gz<br><br>tar -zxvf nginx-1.16.1.tar.gz<br><br></code></pre></td></tr></table></figure><h3 id="将解压的文件夹改名并移动位置到-x2F-usr-x2F-local-x2F-nginx"><a href="#将解压的文件夹改名并移动位置到-x2F-usr-x2F-local-x2F-nginx" class="headerlink" title="将解压的文件夹改名并移动位置到&#x2F;usr&#x2F;local&#x2F;nginx"></a>将解压的文件夹改名并移动位置到&#x2F;usr&#x2F;local&#x2F;nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv nginx-1.16.1 nginx<br><br>mv nginx/ /usr/local/<br></code></pre></td></tr></table></figure><h3 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install gcc openssl openssl-devel pcre-devel zlib zlib-devel<br></code></pre></td></tr></table></figure><h3 id="cd到nginx目录下，执行-x2F-configure"><a href="#cd到nginx目录下，执行-x2F-configure" class="headerlink" title="cd到nginx目录下，执行.&#x2F;configure"></a>cd到nginx目录下，执行.&#x2F;configure</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nginx<br><br>./configure<br></code></pre></td></tr></table></figure><h3 id="执行make和make-install命令"><a href="#执行make和make-install命令" class="headerlink" title="执行make和make install命令"></a>执行make和make install命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">make<br><br>make install<br></code></pre></td></tr></table></figure><h3 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nginx/sbin<br><br>./nginx <br><br>ps -ef|grep nginx<br><br>./nginx -s reload<br><br>./nginx -s stop<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo初入坑</title>
    <link href="/2021/01/15/hexo%E5%88%9D%E5%85%A5%E5%9D%91/"/>
    <url>/2021/01/15/hexo%E5%88%9D%E5%85%A5%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ul><li>node.js（版本在12以上）</li><li>git</li></ul><h4 id="GitHub创建仓库"><a href="#GitHub创建仓库" class="headerlink" title="GitHub创建仓库"></a>GitHub创建仓库</h4><ol><li>在github上创建username.github.io的仓库（username为github用户名）</li><li>在设置中生成token替代密码使用</li></ol><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo<br></code></pre></td></tr></table></figure><h3 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init<br><span class="hljs-meta prompt_"># </span><span class="language-bash">hexo会自动下载所需文件在当前目录下</span><br></code></pre></td></tr></table></figure><h3 id="配置fluid主题"><a href="#配置fluid主题" class="headerlink" title="配置fluid主题"></a>配置fluid主题</h3><ol><li>使用npm安装主题</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>在node_moduels目录找到该主题，复制_config.yml到博客主目录下，可以改名_config.fluid.yml，修改博客主目录下_config.yml中的配置theme:landscape改为theme:fluid，language改为zh-CN</p><h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><ol><li>修改博客根目录下的_config.yml文件中的deploy<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">deploy:<br>  type: git<br>  repo: https://github.com/username/username.github.io<br>  branch: master<br>  token: ******(前面生成的token)<br></code></pre></td></tr></table></figure></li><li>安装插件 hexo-deployer-git<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li>执行hexo d并在命令行输入github用户名和准备好的token</li><li>打开 <a href="https://username.github.io/">https://username.github.io</a> 查看是否部署成功</li></ol><h3 id="常用Hexo命令"><a href="#常用Hexo命令" class="headerlink" title="常用Hexo命令"></a>常用Hexo命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new &quot;post&quot;      # 新建文章<br>hexo new page &quot;page&quot; # 新建页面<br>hexo generate            # 生成静态页面至public目录<br>hexo server              # 开启预览访问端口（默认端口4000）<br>hexo deploy              # 部署到GitHub<br>hexo help                # 查看帮助<br>hexo version             # 查看Hexo的版本<br>hexo clean<br>缩写命令：<br>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy<br>组合命令：<br>hexo s -g   # 生成并本地预览<br>hexo d -g   # 生成并上传<br></code></pre></td></tr></table></figure><h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ol><li>hexo中文文档地址  <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></li><li>fluid用户手册 <a href="https://hexo.fluid-dev.com/docs/start/">https://hexo.fluid-dev.com/docs/start/</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/14/hello-world/"/>
    <url>/2021/01/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
